FS 0 - Base:
	- Bending: 20
	- CPU: 260us | 233us
FS 1 - By Point:
	- Bending: 20
	- CPU: 396us | 352
FS 2 - By Point, Compact:
	- Bending: 20
	- CPU: 375us | 332
FS 3 - By Point, Compact, Integrating:
	- Bending: 20
	- CPU: 380us | 342
FS 20 - By Springs, With Intrinsics:
	- Bending: 20
	- CPU: 212us | 187us | 193us
FS 21 - By Springs, With Intrinsics, Layout Optimized:
	- Bending: 20
	- Optimize 1:
		- CPU: 195us (when prev was 198us)
	- Optimize 2:
		- CPU: 189us (when prev was 194)

##########################################################

= Five-pronged plan:
	+ 0.  FS Base (by spring)
	+ 0b. Fixes: 
		+ Fix move
		+ Bending measurement
		+ New object (very long), with fixed and probe
	+ 20. By Point
	+ 21. By Point, Compact metadata
	+ 22. By Point, Compact metadata, With integration
		+ a. PositionBased
		+ b. With integration (requires new buffer & swap)
	- 23. By Point, With Intrinsics
	- 24. By Point, With Intrinsics, Layout Optimized
	- 25. By Point, With Intrinsics, Layout Optimized, Multi-threaded
	= 10. By Spring, With Intrinsics
		- Test with reciprocal sqrt
	= 11. By Spring, With Intrinsics, Layout Optimized
		+ SCoreLib::CacheModel class
		+ Reorderings done by ObjectBuilder, with new ILayoutOptimizer framework
		+ initial ACMR = 0.515219 (CacheModel<1, 64, vec2f>)
		+ Optimize
		+ Lookahead=0 CacheModel<1, 64, vec2f> : final ACMR = 0.385301
		+ New algo: final ACMR = 0.58686
		- If reciprocal sqrt above is faster, also here
	= 12. By Spring, With Structural Intrinsics
		+ Layout
		- Intrinsics structure
		- If reciprocal sqrt above is faster, also here
	
	- Notes:
		- When integration is...integrated, it might fare worse because we do double the number of fp operations


- Others:
	- Position Based (Muller)
	- Paper, with Eigen

####################################################################################################
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
####################################################################################################

= Initial conditions:
	+ Gravity:
		+ Goes to SimulationParameters, as vec2f AssignedGravity,
		  via SimulationController::EnableGravity(bool)
			+ Comment on convenience
	+ Move:
		+ As now
	+ Pin:
		+ Tool
		+ Sets via Points::SetFrozenCoefficient(...)
		+ Render: also uploaded as part of Points, always
			+ Shader: black

	- Particle Force:
		- UI:
			- When Particle Force engaged: at click/particle selection, open window for {direction & magnitude}, {remove}
		- Sets via Points::SetAssignedForce(...)
		- Render: uploaded as vectors by SimulationController at Render()
			- Enabled/Disabled by menu item => SimulationController::mDoRenderAssignedParticleForces


####################################################################################################
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
####################################################################################################

DONE:

+ Get started with V 1.0:
	+ Containers, buffers, special vectors
	+ ResourceLocator
	+ StructuralMaterial
	+ StructuralMaterialDatabase
	+ Points
		+ Phys: position, velocity
		+ Network: springs
		+ Render: render radius, render color (vec4f), factory render color
	+ Springs
		+ Physics:
			+ Stiffness
			+ RestLength
		+ Network
		+ Render: render thickness, render color (vec4f), factory render color
	+ Object: purely data
		+ Points
		+ Springs
	+ ObjectDefinition/File
	+ ObjectBuilder

	+ ViewModel
	+ RenderContext skeleton

	+ SimulationController

	+ MainFrame
	+ MainApp

	+ Add to GitHub

+ Make json

+ Rendering:
	+ MainFrame:
		+ Always render with timer loop
		+ mMainGLCanvas.Refresh()
			+ Change OnPaint to be on canvas
			+ OnPaint: SimulationController.Render()
	+ RenderContext:
		! RenderContext does not take point count, does everything at upload
		+ API: 
			+ cctor
				+ Load shaders
				+ Setup VBOs
				+ Set params
			+ RenderStart()
			+ Upload(...all...)
				+ Points
					+ Shader
				+ Springs
					- Shader
			+ RenderEnd()
				+ Run all shaders
		+ Complete:
			+ OnViewModelUpdated()

+ Interactions:
	+ Tools
	+ ToolController
	+ Mouse-taking @ MainFrame (see 'TODO')
	+ Do shift @ MouseDown & MouseMove, passing as boolean to ToolController::OnMouseXYZ(.)
	+ See move

+ Put timer back
	+ Rename "RenderTimer" as "SimulationTimer"
	+ On timer:
		+ Detect shift and send to ToolController
			+ Like before
			+ Remove extra shift boolean at others
		+ Invoke ToolController::Update
			+ Remove other invocations
+ Reset menu

+ Point highlight when picked
	+ Tool: Controller->HighlightPoint(elementIndex, true/false)
		+ new Points buffer: float highlight
		+ Uploaded to RenderContext
			+ ...which populates float in struct
+ BGColor

+ ViewModel: recalc zoom at resize
	+ See if exists API to get max size
	+ Communicate size @ controller creation
		+ See if available by then
	+ Also do camera calculation

+ MoveTool:
	+ Consider offset, not absolute position
	+ Controller::GetPointPosition(), store in engagement state, and use it for offset

+ OpenGL on separate thread

================================================================

+ UI Toolbars:
	+ Simulation control:
		+ Play: 1 simulation step per-second
		+ Fast-Forward: 1 simulation step as fast as possible
		+ Pause: step on-demand				
		+ UI:
			+ All sticky buttons, mutex
			+ Pause: space
			+ Step on-demand: via Enter
				+ Only do if currently selected
		
	- Initial conditions:
		+ Gravity (boolean)
		+ Move
		+ Pin
		+ Particle Force
		+ UI:
			+ Gravity: sticky button, independent
			+ Move, Pin, Particle Forces: sticky buttons, mutex
			+ Remove Tools menu
	+ Simulator type change:
		+ SimulationController::SetSimulator(enum from SLabTypes)
			+ Changes simulator and resets
				+ SimulationController holds only one simulator, the current one

+ ISimulator architecture:
	+ Files:
		+ Simulator/Common
			+ ISimulator
			+ SimulatorCommonParameters.h
			+ SimulatorRegistry (static)
		+ Simulator/Classic
			+ SimulatorClassic
			+ SimulatorClassicParameters.h
	+ SimulationParameters:
		+ SimulatorCommonParameters member
			+ In SimulatorCommonParameters.h
		+ SimulatorClassicParameters member
			+ From own include
	+ <SimulatorXXX: ISimulator>
		+ cctor(Object, SimulationParameters)
		+ OnSimulationParametersChanged(SimulationParameters)	
	+ Setting paramers:
		+ Controller::Set(common parameter @ SimulationParameters)
		+ Controller::Set(specific parameter @ SimulationParameters::SimulatorXParameters)
		+ Both: cause invocation - later - of ISimulator->OnSimulationParametersChanged(SimulationParameters)
			+ Controlled via controller's mAreParametersDirty, @ beginning of simulation step
				+ Reset after use

+ Do "ClassicSimulator"
	+ Do

+ Decide whether to change spring reduction fraction into spring stiffness, and also damping
	+ If so, recalc defaults to match FS
	+ If so, nuke dt's
	+ & rename both, & Tooltips
	
+ MT RenderContext: exceptions
	+ The thing that's ahred_ptr is the TaskCompletion
	+ TaskCompletion stores exc message
	+ Wait throws
	+ Test w/shader error
	+ Test w/OpenGL version

+ Nuke BufferAllocator & AllocWorkBuffer/Copy methods

+ SettingsDialog
	+ Settings
	+ SettingsManager
		+ Create @ MainFrame
		+ Takes SimulationController directly
	+ CommonParams, SimulationController and SettingsManager:
		+ Gravity
		+ dt
		+ MassAdjustment
		+ GlobalDamping
	+ Dialog
		+ One static box per common + each simulator
	+ Use params @ Simulator
	+ Open via toolbar, together with Reset and Open
		+ "Actions"
		+ Leave in menu, and add "Settings..."
