+ Get started with V 1.0:
	+ Containers, buffers, special vectors
	+ ResourceLocator
	+ StructuralMaterial
	+ StructuralMaterialDatabase
	+ Points
		+ Phys: position, velocity
		+ Network: springs
		+ Render: render radius, render color (vec4f), factory render color
	+ Springs
		+ Physics:
			+ Stiffness
			+ RestLength
		+ Network
		+ Render: render thickness, render color (vec4f), factory render color
	+ Object: purely data
		+ Points
		+ Springs
	+ ObjectDefinition/File
	+ ObjectBuilder

	+ ViewModel
	+ RenderContext skeleton

	+ SimulationController

	+ MainFrame
	+ MainApp

	+ Add to GitHub

+ Make json

+ Rendering:
	+ MainFrame:
		+ Always render with timer loop
		+ mMainGLCanvas.Refresh()
			+ Change OnPaint to be on canvas
			+ OnPaint: SimulationController.Render()
	+ RenderContext:
		! RenderContext does not take point count, does everything at upload
		+ API: 
			+ cctor
				+ Load shaders
				+ Setup VBOs
				+ Set params
			+ RenderStart()
			+ Upload(...all...)
				+ Points
					+ Shader
				+ Springs
					- Shader
			+ RenderEnd()
				+ Run all shaders
		+ Complete:
			+ OnViewModelUpdated()

+ Interactions:
	+ Tools
	+ ToolController
	+ Mouse-taking @ MainFrame (see 'TODO')
	+ Do shift @ MouseDown & MouseMove, passing as boolean to ToolController::OnMouseXYZ(.)
	+ See move

+ Put timer back
	+ Rename "RenderTimer" as "SimulationTimer"
	+ On timer:
		+ Detect shift and send to ToolController
			+ Like before
			+ Remove extra shift boolean at others
		+ Invoke ToolController::Update
			+ Remove other invocations
+ Reset menu

+ Point highlight when picked
	+ Tool: Controller->HighlightPoint(elementIndex, true/false)
		+ new Points buffer: float highlight
		+ Uploaded to RenderContext
			+ ...which populates float in struct
+ BGColor

+ ViewModel: recalc zoom at resize
	+ See if exists API to get max size
	+ Communicate size @ controller creation
		+ See if available by then
	+ Also do camera calculation

+ MoveTool:
	+ Consider offset, not absolute position
	+ Controller::GetPointPosition(), store in engagement state, and use it for offset

================================================================

- Architecture:
	- MainFrame: (via toolbar)
		- Simulation control:
			- Play: 1 simulation step per-second
			- Fast-Forward: 1 simulation step as fast as possible
			- Pause: step on-demand				
			- UI:
				- All sticky buttons, mutex
				- Pause: space
				- Step on-demand: via Enter
		- Initial conditions:
			- Gravity (boolean)
				- Goes to SimulationParameters, as boolean
			- Move:
				- As now
			- Pin:
				- Sets in Points::mIsPinnedBuffer
			- Particle Force: (TBD: better name: ~individual)
				- Sets in Points::mIndividualForceBuffer
			- UI:
				- Gravity: sticky button, independent
				- Move, Pin, Particle Forces: sticky buttons, mutex
				- When Particle Forces engaged: at click/particle selection, open window for direction & magnitude
				- Remove Tools menu
			- Pinned points render: also uploaded as part of Points, always
				- Shader: black
			- Particle Forces: uploaded as vectors by SimulationController at Render()
				- Enabled/Disabled by menu item => SimulationController::mDoRenderParticleForces
		- Simulator type change:
			- SimulationController::SetSimulator(enum from SLabTypes)
				- Changes simulator and resets
					- SimulationController holds only one simulator, the current one

- ISpringSimulator architecture:
	- Files:
		- SimulatorCommon
			- ISimulator
			- SimulatorCommonParameters.h
		- SimulatorClassic
			- SimulatorClassic
			- SimulatorClassicParameters.h
	- SimulationParameters:
		- SimulatorCommonParameters member
			- In SimulatorCommonParameters.h
		- SimulatorClassicParameters member
			- From own include

	// TODOHERE
	- ISpringSimulator
		- cctor(Points

	
	- Setting paramers:
		- Controller::Set(common parameter @ SimulationParameters)
		- Controller::Set(specific parameter @ SimulationParameters::SimulatorXParameters)
			- ISpringSimulator->OnSimulationParametersChanged()
				- Controlled via controller's mAreParametersDirty, @ beginning of simulation step

- UI:
	- MainToolBar (left):
		- SimulatorType drop-down
		- Simulation control buttons
		- Initial conditions buttons
		- OpenObject, Reset buttons
	- ProbeToolBar (bottom:
		- Migrate EventPanel here
		- Also displays basic stats: via TBD
	- Application Icons

	- Load Object handling

- Do "ClassicSpringSimulator"

-------------------------------------------------------


- Misc:
	- Check assembly of SimulationController::Render() wrt accesses to mObject->GetSprings()

	- ProbePanel:
		- ScalarTimeSeries
		- Scalar
			- Also @ EventHandler
		- TODO: also used to display stats & simulator-specific outputs
			- Simulation step #
			- Simulation time
			- Update elapsed: last, avg

	- Experiment:
		- OpenGL on separate thread
