+ Get started with V 1.0:
	+ Containers, buffers, special vectors
	+ ResourceLocator
	+ StructuralMaterial
	+ StructuralMaterialDatabase
	+ Points
		+ Phys: position, velocity
		+ Network: springs
		+ Render: render radius, render color (vec4f), factory render color
	+ Springs
		+ Physics:
			+ Stiffness
			+ RestLength
		+ Network
		+ Render: render thickness, render color (vec4f), factory render color
	+ Object: purely data
		+ Points
		+ Springs
	+ ObjectDefinition/File
	+ ObjectBuilder

	+ ViewModel
	+ RenderContext skeleton

	+ SimulationController

	+ MainFrame
	+ MainApp

	+ Add to GitHub

+ Make json

+ Rendering:
	+ MainFrame:
		+ Always render with timer loop
		+ mMainGLCanvas.Refresh()
			+ Change OnPaint to be on canvas
			+ OnPaint: SimulationController.Render()
	+ RenderContext:
		! RenderContext does not take point count, does everything at upload
		+ API: 
			+ cctor
				+ Load shaders
				+ Setup VBOs
				+ Set params
			+ RenderStart()
			+ Upload(...all...)
				+ Points
					+ Shader
				+ Springs
					- Shader
			+ RenderEnd()
				+ Run all shaders
		+ Complete:
			+ OnViewModelUpdated()

+ Interactions:
	+ Tools
	+ ToolController
	+ Mouse-taking @ MainFrame (see 'TODO')
	+ Do shift @ MouseDown & MouseMove, passing as boolean to ToolController::OnMouseXYZ(.)
	+ See move

+ Put timer back
	+ Rename "RenderTimer" as "SimulationTimer"
	+ On timer:
		+ Detect shift and send to ToolController
			+ Like before
			+ Remove extra shift boolean at others
		+ Invoke ToolController::Update
			+ Remove other invocations
+ Reset menu

+ Point highlight when picked
	+ Tool: Controller->HighlightPoint(elementIndex, true/false)
		+ new Points buffer: float highlight
		+ Uploaded to RenderContext
			+ ...which populates float in struct
+ BGColor

+ ViewModel: recalc zoom at resize
	+ See if exists API to get max size
	+ Communicate size @ controller creation
		+ See if available by then
	+ Also do camera calculation

+ MoveTool:
	+ Consider offset, not absolute position
	+ Controller::GetPointPosition(), store in engagement state, and use it for offset

================================================================

- Check assembly of SimulationController::Render() wrt accesses to mObject->GetSprings()

- ISpringSimulator architecture:

	- MainFrame: RunSimulationStep()
		- Triggered by space bar
		- SimulationController.RunSimulationStep()

	// TODOHERE
	- ISpringSimulator
		- cctor(Points

	- SimulationController::SetSimulator(enum from SLabTypes)

	- Setting paramers:
		- Controller::Set(common parameter @ SimulationParameters)
		- Controller::Set(specific parameter @ SimulationParameters::SimulatorXParameters)
			- ISpringSimulator->OnSimulationParametersChanged()
				- Controlled via controller's mAreParametersDirty, @ beginning of simulation step

	- Do "ClassicSpringSimulator"

- UI:
	- MainToolBar:
		- SimulatorType drop-down
		- Step button
		- Reset button
		- OpenObject button
	- Icons
	- ProbePanel:
		- ScalarTimeSeries
		- Scalar
			- Also @ EventHandler
		- TODO: also used to display stats & simulator-specific outputs
			- Simulation step #
			- Simulation time
			- Update elapsed: last, avg

	- Load Object

- Experiment:
	- OpenGL on separate thread

-------------------------------------------------------
